<?php
/**
 * @file
 */

define('MICROSERVICES_MANAGER', 'manager');
define('MICROSERVICES_QUEUE_REQUEST', 'request');
define('MICROSERVICES_QUEUE_REPLY', 'reply');
define('MICROSERVICES_MESSAGE_ACTION', 'action');
define('MICROSERVICES_MESSAGE_EVENT', 'event');
define('MICROSERVICES_MESSAGE_RESULT', 'result');

/*
 * Implements hook_microservices_info().
 */
function microservices_microservices_info() {
  return array(
    MICROSERVICES_MANAGER => array(
      'title' => t('Microservices queue manager'),
      'events' => array(
        MICROSERVICES_MANAGER . ' ' . MICROSERVICES_QUEUE_REQUEST,
        MICROSERVICES_MANAGER . ' ' . MICROSERVICES_QUEUE_REPLY,
      ),
    ),
  );
}

/**
 * Implements hook_hook_info();
 */
function microservices_hook_info() {
  return array(
    'microservices_info' => array(
      'group' => 'microservices',
    ),
    'microservices_action' => array(
      'group' => 'microservices',
    ),
    'microservices_result' => array(
      'group' => 'microservices',
    ),
    'microservices_event' => array(
      'group' => 'microservices',
    ),
  );
}

/**
 * @param string $service
 *
 * @throws \Exception
 */
function microservices_assert_service($service) {
  $info = microservices_info();
  if (!isset($info['services'][$service])) {
    throw new Exception("Unknown service: $service");
  }
}

/**
 * @param string $service
 * @param string $action
 *
 * @throws \Exception
 */
function microservices_assert_action($service, $action) {
  microservices_assert_service($service);
  $info = microservices_info();
  if (isset($info['services'][$service]['actions'])
      && array_search($action, $info['services'][$service]['actions']) === FALSE) {
    throw new Exception("Unknown action: $action@$service");
  }
}

function microservices_assert_event($event) {
  $info = microservices_info();
  if (!isset($info['events'][$event])) {
    throw new Exception("Unknown event: $event");
  }
}

/**
 * @param string $service
 *
 * @return string
 * @throws \Exception
 */
function microservices_get_module_by_service($service) {
  microservices_assert_service($service);
  $info = microservices_info();
  return $info['services'][$service]['module'];
}

/**
 * @param string $type
 *
 * @throws \Exception
 */
function microservices_assert_queue_type($type) {
  if (!in_array($type, array(MICROSERVICES_QUEUE_REQUEST, MICROSERVICES_QUEUE_REPLY))) {
    throw new Exception("Wrong queue type: $type");
  }
}

/**
 * @param string $event
 *
 * @return array
 * @throws \Exception
 */
function microservices_get_event_binders($event) {
  microservices_assert_event($event);
  $info = microservices_info();
  return isset($info['bind events'][$event]) ? $info['bind events'][$event] : array();
}

/**
 * @return array
 * @throws \Exception
 */
function microservices_info() {
  $cache = &drupal_static(__FUNCTION__);

  if (!isset($cache)) {
    $services = array();
    $hook = 'microservices_info';
    foreach (module_implements($hook) as $module) {
      $function = $module . '_' . $hook;
      if (function_exists($function)) {
        $result = call_user_func($function);
        if (($module != 'microservices')
            && (isset($result[MICROSERVICES_MANAGER]))) {
          throw new Exception('Microservices manager should not been overridden');
        }
        $machine_name = key($result);
        foreach($result as &$item) {
          $item['module'] = $module;
          if (empty($item['title'])) {
            $item['title'] = $machine_name;
          }
        }
        if (isset($result) && is_array($result)) {
          $services = array_merge($services, $result);
        }
        elseif (isset($result)) {
          $services[] = $result;
        }
      }
    }
    drupal_alter($hook, $services);

    $cache = array(
      'services' => $services,
      'events' => array(),
      'bind events' => array(),
    );

    foreach ($services as $service => $service_info) {
      if (isset($service_info['events'])) {
        foreach ($service_info['events'] as $event) {
          if (!isset($cache['events'][$event])) {
            $cache['events'][$event] = array();
          }
          if (array_search($service, $cache['events'][$event]) === FALSE) {
            $cache['events'][$event][] = $service;
          }
        }
      }
      if (isset($service_info['bind events'])) {
        foreach ($service_info['bind events'] as $event) {
          if (!isset($cache['bind events'][$event])) {
            $cache['bind events'][$event] = array();
          }
          if (array_search($service, $cache['bind events'][$event]) === FALSE) {
            $cache['bind events'][$event][] = $service;
          }
        }
      }
    }

    // Validate event binding.
    foreach (array_keys($cache['bind events']) as $event) {
      if (!isset($cache['events'][$event])) {
        throw new Exception("Event was bound not exist: $event");
      }
    }
  }

  return $cache;
}

/**
 * @param string $event
 * @param mixed $params
 * @param mixed $context
 *
 * @throws \Exception
 */
function microservices_send_event($event, $params, $context = NULL) {
  microservices_assert_event($event);
  $message = new stdClass();
  $message->type = MICROSERVICES_MESSAGE_EVENT;
  $message->event = $event;
  $message->params = $params;
  $message->context = $context;
  microservices_queue_send($message, MICROSERVICES_QUEUE_REQUEST);
}

/**
 * @param string $service
 * @param string $action
 * @param mixed $params
 * @param mixed $sender
 * @param mixed $context
 *
 * @throws \Exception
 */
function microservices_send_action($service, $action, $params = NULL, $sender = NULL, $context = NULL) {
  microservices_assert_action($service, $action);
  $sender && microservices_assert_service($sender);
  $message = new stdClass();
  $message->type = MICROSERVICES_MESSAGE_ACTION;
  $message->recipient = $service;
  $message->action = $action;
  $message->params = $params;
  $message->sender = $sender;
  $message->context = $context;
  microservices_queue_send($message, MICROSERVICES_QUEUE_REQUEST);
}

/**
 * @param object $request
 * @param mixed $result
 * @param \Exception $error
 *
 * @throws \Exception
 */
function microservices_send_result($request, $result, Exception $error = NULL) {
  $message = new stdClass();
  $message->type = MICROSERVICES_MESSAGE_RESULT;
  $message->sender = $request->recipient;
  $message->recipient = $request->sender;
  $message->action = $request->action;
  $message->context = $request->context;
  $message->uuid = $request->uuid;
  // Prepare params object.
  $params = new stdClass();
  if ($error) {
    $params->error = new stdClass();
    $params->error->code = $error->getCode();
    $params->error->message = $error->getMessage();
    $params->error->class = get_class($error);
  }
  else {
    $params->result = $result;
  }
  $message->params = $params;
  microservices_queue_send($message, MICROSERVICES_QUEUE_REPLY);
}

/**
 * @param string $service
 * @param string $type
 *
 * @return mixed
 * @throws \Exception
 */
function microservices_queue($service, $type) {
  $cache = &drupal_static(__FUNCTION__);

  microservices_assert_service($service);
  microservices_assert_queue_type($type);

  $cache_key = "{$service}_$type";

  if (!isset($cache) || !isset($cache[$cache_key])) {
    $class = NULL;
    $info = microservices_info();
    if (!empty($info['services']['queue class'])) {
      $class = $info['services']['queue class'];
    }
    else {
      $class = variable_get("microservices_queue_{$service}_class", 'SystemQueue');
    }
    $queue = new $class("microservices_{$service}_$type");
    /* @var $queue DrupalReliableQueueInterface */
    $queue->createQueue();
    $cache[$cache_key] = $queue;
  }

  return $cache[$cache_key];
}

/**
 * @param object $message
 * @param string $type
 *
 * @throws \Exception
 */
function microservices_queue_send($message, $type) {
  microservices_assert_queue_type($type);
  $queue = microservices_queue(MICROSERVICES_MANAGER, $type);
  // todo Remove Demo message
//  $service = MICROSERVICES_MANAGER;
//  if ($message->type == 'action' || $message->type == 'result') {
//    demo_log("$message->type: $message->sender -> $service");
//  }
//  else {
//    demo_log("$message->type: $message->event -> $service");
//  }
  $queue->createItem(json_encode($message));
}

/**
 * @param string $service
 * @param string $type
 *
 * @return bool
 */
function microservices_queue_process($service, $type) {
  $result = FALSE;
  $queue = microservices_queue($service, $type);
  if ($item = $queue->claimItem()) {
    $message = json_decode($item->data);
    if ($service == MICROSERVICES_MANAGER) {
      microservices_queue_process_message_manager($message);
    }
    else {
      // TODO: Remove Demo message
      if ($type) {
        if ($message->type == 'action' || $message->type == 'result') {
          $action = isset($message->action) ? $message->action : $message->result;
          drush_print("$message->type: $message->sender -> $message->recipient | $action");
        }
        else {
          drush_print("$message->type: $message->event -> all subscribers");
        }
      }
      microservices_queue_process_message_service($message, $service);
    }
    $queue->deleteItem($item);
    $result = TRUE;
  }

  return $result;
}

/**
 * @param object $message
 *
 * @throws \Exception
 */
function microservices_queue_process_message_manager($message) {
    switch ($message->type) {
      case MICROSERVICES_MESSAGE_ACTION:
        // Register message to avoid of double sending of results.
        $message->uuid = microservices_uuid();
        db_insert('microservices_actions')
          ->fields(array(
            'uuid' => $message->uuid,
            'created' => time(),
          ))
          ->execute();
        $queue = microservices_queue($message->recipient, MICROSERVICES_QUEUE_REQUEST);
        $queue->createItem(json_encode($message));

        microservices_send_event(
          MICROSERVICES_MANAGER . ' ' . MICROSERVICES_QUEUE_REQUEST,
          array(
            'action' => $message->action,
            'receiver' => $message->receiver,
          )
        );
        break;

      case MICROSERVICES_MESSAGE_RESULT:
        // Find action in registry by UUID.
        $action = db_select('microservices_actions', 'actions')
          ->fields('actions')
          ->condition('uuid', $message->uuid)
          ->execute()
          ->fetchObject();
        if (!$action) {
          throw new Exception('Action was not registered or result was already sent.');
        }
        // Send result message.
        $queue = microservices_queue($message->recipient, MICROSERVICES_QUEUE_REPLY);
        $queue->createItem(json_encode($message));
        // Remove record from actions registry.
        db_delete('microservices_actions')
          ->condition('id', $action->id)
          ->execute();

        microservices_send_event(
          MICROSERVICES_MANAGER . ' ' . MICROSERVICES_QUEUE_REPLY,
          array(
            'action' => $message->action,
            'receiver' => $message->receiver,
          )
        );
        break;

      case MICROSERVICES_MESSAGE_EVENT:
        foreach (microservices_get_event_binders($message->event) as $service) {
          $queue = microservices_queue($service, MICROSERVICES_QUEUE_REQUEST);
          $queue->createItem(json_encode($message));

          microservices_send_event(
            MICROSERVICES_MANAGER . ' ' . MICROSERVICES_QUEUE_REQUEST,
            array(
              'action' => $message->action,
              'receiver' => $message->receiver,
            )
          );
        }
        break;
    }
}

/**
 * @param object $message
 * @param string $service
 */
function microservices_queue_process_message_service($message, $service) {
  $module = microservices_get_module_by_service($service);

  switch ($message->type) {
    case MICROSERVICES_MESSAGE_ACTION:
      try {
        module_invoke($module, 'microservices_action', $message);
      }
      catch (Exception $e) {
        if ($message->sender) {
          microservices_send_result($message, NULL, $e);
        }
      }
      break;

    case MICROSERVICES_MESSAGE_RESULT:
      try {
        module_invoke($module, 'microservices_result', $message);
      }
      catch (Exception $e) {
        watchdog_exception('microservices', $e);
      }
      break;

    case MICROSERVICES_MESSAGE_EVENT:
      try {
        module_invoke($module, 'microservices_event', $message);
      }
      catch (Exception $e) {
        watchdog_exception('microservices', $e);
      }
      break;
  }
}

/**
 * @return string
 */
function microservices_uuid() {
  // The field names refer to RFC 4122 section 4.1.2.
  return sprintf('%04x%04x-%04x-4%03x-%04x-%04x%04x%04x',
    // 32 bits for "time_low".
    mt_rand(0, 65535), mt_rand(0, 65535),
    // 16 bits for "time_mid".
    mt_rand(0, 65535),
    // 12 bits after the 0100 of (version) 4 for "time_hi_and_version".
    mt_rand(0, 4095),
    bindec(substr_replace(sprintf('%016b', mt_rand(0, 65535)), '10', 0, 2)),
    // 8 bits, the last two of which (positions 6 and 7) are 01, for "clk_seq_hi_res"
    // (hence, the 2nd hex digit after the 3rd hyphen can only be 1, 5, 9 or d)
    // 8 bits for "clk_seq_low" 48 bits for "node".
    mt_rand(0, 65535), mt_rand(0, 65535), mt_rand(0, 65535)
  );
}
